/**
 * Subscription Model
 * File-based implementation using LowDB
 */
const fs = require('fs');
const path = require('path');
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

// Define path to data directory
const dataDir = path.join(__dirname, '..', 'data');

// Define database utilities
const db = {
  findByIdAndUpdate: async (collection, id, updates) => {
    try {
      console.log(`UPDATE BY ID: Looking to update _id=${id} in ${collection}`);
      const collectionPath = path.join(dataDir, `${collection}.json`);
      
      // Make sure the file exists
      if (!fs.existsSync(collectionPath)) {
        console.log(`UPDATE BY ID: Creating new collection file for ${collection}`);
        fs.writeFileSync(collectionPath, JSON.stringify({ data: [] }, null, 2), 'utf8');
        return null;
      }
      
      const data = JSON.parse(fs.readFileSync(collectionPath, 'utf8'));
      
      // Ensure data structure
      if (!data.data) {
        data.data = [];
      }
      
      // Find the item by ID
      const index = data.data.findIndex(item => item._id === id);
      
      // If item not found, return null
      if (index === -1) {
        console.log(`UPDATE BY ID: No matching item with _id=${id} in ${collection}`);
        return null;
      }
      
      console.log(`UPDATE BY ID: Found matching item with _id=${id}`);
      
      // Get the existing item
      const existingItem = data.data[index];
      
      // Create updated item by merging existing with updates
      const updatedItem = {
        ...existingItem,
        ...updates,
        updatedAt: new Date()
      };
      
      // Replace the old item with the updated one
      data.data[index] = updatedItem;
      
      // Write the updated data back to the file
      fs.writeFileSync(collectionPath, JSON.stringify(data, null, 2), 'utf8');
      
      console.log(`UPDATE BY ID: Successfully updated item with _id=${id} in ${collection}`);
      
      // Return the updated item
      return updatedItem;
    } catch (err) {
      console.error(`Error in findByIdAndUpdate for ${collection}:`, err);
      throw err;
    }
  }
};

// Define Subscription Schema
const SubscriptionSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  },
  vendor: {
    type: String,
    required: true
  },
  product: {
    type: String,
    required: true
  },
  type: {
    type: String,
    default: 'Subscription'
  },
  seats: {
    type: Number,
    default: 1
  },
  cost: {
    type: Number
  },
  renewalDate: {
    type: Date
  },
  purchaseDate: {
    type: Date
  },
  notes: {
    type: String
  },
  contractUrl: {
    type: String
  },
  attachments: [{
    filename: String,
    path: String,
    uploadDate: Date
  }],
  tags: [{
    type: String
  }],
  status: {
    type: String,
    enum: ['active', 'expired', 'pending', 'renewed'],
    default: 'active'
  },
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  system: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'System'
  },
  created: {
    type: Date,
    default: Date.now
  }
});

// Create MongoDB model (this will be used if MongoDB is connected)
let SubscriptionModel;
try {
  // Try to get the existing model first to avoid redefining
  SubscriptionModel = mongoose.model('Subscription');
} catch (e) {
  // If not found, define it
  SubscriptionModel = mongoose.model('Subscription', SubscriptionSchema);
}

// Import the FileDBSubscription - important to do this after we've defined our own model to avoid circular dependencies
let FileDBSubscription = null; 
try {
  // Dynamic import of FileDBSubscription to avoid circular dependencies
let FileDBSubscription = null;
function getFileDBSubscription() {
  if (!FileDBSubscription) {
    try {
      // Dynamic import of FileDBSubscription to avoid circular dependencies
let FileDBSubscription = null;
function getFileDBSubscription() {
  if (!FileDBSubscription) {
    try {
      const fileDb = require('../utils/file-db');
      FileDBSubscription = fileDb.FileDBSubscription;
    } catch (err) {
      console.error('Error importing FileDBSubscription:', err);
    }
  }
  return FileDBSubscription;
}
    } catch (err) {
      console.error('Error importing FileDBSubscription:', err);
    }
  }
  return FileDBSubscription;
}
} catch (err) {
  console.error('Error importing FileDBSubscription:', err);
}

// This is a wrapper around the file DB to maintain API compatibility
const Subscription = {
  // Initialize with MongoDB model methods
  ...SubscriptionModel,
  
  // Mongoose-like populate functionality
  populate: async (docs, path) => {
    // Import models with proper destructuring
    const SystemModule = require('./System');
    const System = SystemModule.System;
    const User = require('./User');
    
    if (!docs) return null;
    
    // Handle single document
    if (!Array.isArray(docs)) {
      // Use await to ensure proper async resolution
      return (await Subscription.populate([docs], path))[0];
    }
    
    // Clone the documents to avoid modifying originals
    const clonedDocs = JSON.parse(JSON.stringify(docs));
    
    // Process each document
    for (const doc of clonedDocs) {
      if (path === 'assignedSystems') {
        // Populate systems with better error handling
        if (doc.assignedSystems && doc.assignedSystems.length > 0) {
          console.log(`Subscription Populate - Populating ${doc.assignedSystems.length} systems for subscription ${doc._id}`);
          
          // Map to array of promises then await all
          const systemPromises = doc.assignedSystems.map(async systemId => {
            if (!systemId) {
              console.log(`Subscription Populate - Skipping null/undefined system ID`);
              return null;
            }
            
            // Ensure we're working with a string ID
            const sysId = systemId.toString();
            console.log(`Subscription Populate - Attempting to find System with ID: ${sysId}`);
            
            try {
              const system = await System.findById(sysId);
              if (system) {
                return system;
              } else {
                console.log(`Subscription Populate - No system found with ID: ${sysId}`);
                return systemId; // Return original ID if system not found
              }
            } catch (err) {
              console.error(`Error populating system with ID ${sysId}:`, err);
              return systemId; // Return original ID on error
            }
          });
          
          // Filter out null values after populating
          const populatedSystems = await Promise.all(systemPromises);
          doc.assignedSystems = populatedSystems.filter(system => system !== null);
        } else {
          console.log(`Subscription Populate - No systems to populate for subscription ${doc._id}`);
          // Initialize as empty array if undefined
          if (!doc.assignedSystems) {
            doc.assignedSystems = [];
          }
        }
      } else if (path === 'user') {
        // Populate user with better error handling
        if (doc.user) {
          // Ensure we're working with a string ID
          const userId = doc.user.toString();
          console.log(`Subscription Populate - Attempting to find User with ID: ${userId}`);
          
          try {
            const user = await User.findById(userId);
            console.log(`Subscription Populate - User.findById result: ${JSON.stringify(user)}`);
            
            if (user) {
              doc.user = user;
              // Ensure _id is available as a string
              if (user._id) {
                // Add id property for backwards compatibility
                doc.user.id = user._id.toString();
              }
            } else {
              console.log(`Subscription Populate - No user found with ID: ${userId}`);
            }
          } catch (err) {
            console.error(`Error populating user with ID ${userId}:`, err);
          }
        } else {
          console.log(`Subscription Populate - No user ID to populate`);
        }
      }
    }
    
    return clonedDocs;
  },

  // Update a subscription by ID with better error handling
  findByIdAndUpdate: async (id, updateData) => {
    console.log(`Updating subscription with ID: ${id}`);
    console.log('Update data:', JSON.stringify(updateData, null, 2));
    
    try {
      // First try MongoDB if it's available
      try {
        const result = await SubscriptionModel.findByIdAndUpdate(id, updateData, { new: true });
        if (result) {
          console.log('Updated subscription in MongoDB');
          return result;
        }
      } catch (mongoErr) {
        console.log('MongoDB update failed, falling back to file DB');
      }
      
      // Use the fixed db function to update the subscription
      const result = await db.findByIdAndUpdate('subscriptions', id, updateData);
      if (!result) {
        console.log(`Subscription with ID ${id} not found for update`);
        return null;
      }
      return result;
    } catch (err) {
      console.error('Error updating subscription:', err);
      throw new Error(`Failed to update subscription: ${err.message}`);
    }
  }
};

// Override methods with FileDBSubscription if MongoDB is not available
if (FileDBSubscription) {
  // Mix in the file-based methods if we need fallback
  if (!mongoose.connection.readyState) {
    console.log('MongoDB not connected, using file-based DB methods');
    Subscription.find = FileDBSubscription.find.bind(FileDBSubscription);
    Subscription.findById = FileDBSubscription.findById.bind(FileDBSubscription);
    Subscription.findOne = FileDBSubscription.findOne.bind(FileDBSubscription);
    Subscription.create = FileDBSubscription.create.bind(FileDBSubscription);
    Subscription.count = FileDBSubscription.count.bind(FileDBSubscription);
    Subscription.findByManager = FileDBSubscription.findByManager.bind(FileDBSubscription);
  } else {
    console.log('MongoDB connected, using MongoDB methods');
  }
}

// Add debug method to help diagnose connection issues
Subscription.debug = function() {
  return {
    mongooseConnected: mongoose.connection.readyState,
    hasFileDBFallback: !!FileDBSubscription,
    modelMethods: {
      find: typeof Subscription.find === 'function',
      findById: typeof Subscription.findById === 'function',
      findOne: typeof Subscription.findOne === 'function',
      create: typeof Subscription.create === 'function'
    }
  };
};

// Make sure the model is properly initialized before exporting
Subscription.createDemo = async function(userId) {
  console.log(`Creating demo subscription for user ${userId}`);
  
  try {
    const demoSubscription = {
      name: 'Demo Subscription',
      vendor: 'Demo Vendor',
      product: 'Demo Product',
      type: 'Subscription',
      seats: 5,
      cost: 99.99,
      renewalDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now
      purchaseDate: new Date(),
      notes: 'This is a demo subscription created for testing purposes.',
      status: 'active',
      user: userId
    };
    
    // Check if we're using MongoDB or File DB
    const currentDebug = Subscription.debug();
    console.log('Subscription model debug info:', currentDebug);
    
    // Use the appropriate create method
    return await Subscription.create(demoSubscription);
  } catch (err) {
    console.error('Error creating demo subscription:', err);
    throw err;
  }
};

module.exports = Subscription; 